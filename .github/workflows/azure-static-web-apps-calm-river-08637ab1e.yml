name: Build and deploy Node.js app to Azure Web App - CCCTransfers

on:
  push:
    branches:
      - ci
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install server dependencies
        run: npm install
        working-directory: server

      - name: Zip server artifact for deployment
        run: zip -r release.zip .
        working-directory: server

      - name: Upload server artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: node-server-app
          path: server/release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-server-app

      - name: Unzip server artifact for deployment
        run: unzip release.zip

      - name: Create Deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments
          ref: ${{ github.ref }}
          environment: "production"
          description: "Deploying to Azure Web App"
          auto_merge: false
          required_contexts: "[]" # Making sure it's recognized as a JSON array
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "CCCTransfers"
          slot-name: "production"
          package: .

      - name: Update Deployment Status
        if: always()
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.id }}/statuses
          state: ${{ job.status == 'success' && 'success' || 'failure' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
